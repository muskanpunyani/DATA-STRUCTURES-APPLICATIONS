Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

 

Example:

Input: 
board = [
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
words = ["oath","pea","eat","rain"]

Output: ["eat","oath"]

 

Note:

    All inputs are consist of lowercase letters a-z.
    The values of words are distinct.

***********************************************************************************************************************


# define alphabet 26
struct Trie{
    struct Trie *children[alphabet];
    bool isend;
    string value;    // value is the string we need to store
};
class Solution {
public:
struct Trie* getNode(void)    // creating node
{
    struct Trie *node=new Trie;
    node->isend=false;
    for(int i=0;i<alphabet;i++)
    {
        node->children[i]=NULL;
    }
    return node;
}
void insert(struct Trie* root,string key)   // insert values in trie
{
    
    struct Trie *pcrawl=root;
    for(int i=0;i<key.length();i++)
    {
        int index=key[i]-'a';
        if(pcrawl->children[index]==NULL)
        {
            pcrawl->children[index]=getNode();
        }
        pcrawl=pcrawl->children[index];
    }
    pcrawl->value=key;
    pcrawl->isendofword=true;
}
    
    void dfs(int i, int j, Trie* head, vector<vector<char>>& board, vector<string>* out) {
        if (i >= board.size() || i < 0 || j >= board[i].size() || j < 0) return;
        
        char c = board[i][j];
        if (c == '.') return;    // if visited
        
        Trie* next_trie = head->children[c - 'a'];  // find char in trie
        if (next_trie == nullptr) return;          // if char not found
        
        board[i][j] = '.'; // changes board  , marking visited
        
        if (next_trie->isend && next_trie->value!="") {
            out->push_back(next_trie->value);   // insert word which is found
            next_trie->isend = false; // changes the trie (other option is to use hashset) // to avoid repeatitions
        }
                                     
        dfs(i+1, j, next_trie, board, out);   // dfs in all 4 dirn for the char which is found in trie
        dfs(i, j+1, next_trie, board, out);
        dfs(i-1, j, next_trie, board, out);
        dfs(i, j-1, next_trie, board, out);
        
        board[i][j] = c; // reverting board  , i.e marking unvisited
                                     
        return;
    }   
    
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {  // main fn will call this function
        if (board.empty()) return vector<string>(); 
    
        struct Trie *head = getNode();
        for(int i=0;i<words.size();i++)
        {
            insert(head,words[i]);   // insert the word list in trie
        }
        
        vector<string> out;
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[i].size(); j++) {
                dfs (i, j, head, board, &out);                // dfs every index
            }
        }
        return out;
    }
};
