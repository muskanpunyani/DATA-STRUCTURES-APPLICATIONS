Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]

 

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

 

Note:

    All of the nodes' values will be unique.
    p and q are different and both values will exist in the binary tree.

****************************************************************************************************************************************************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/* find path from root to p and q,and then compare the path
    space=0(n) time=0(n) 
    */
class Solution {
public:
    bool findpath(TreeNode* root,vector<int> &path,TreeNode* m)
    {
        int k=m->val;
        if(root==NULL)
        {
            return false;
        }
        path.push_back(root->val);
        if(root->val==k)  // i.e the required node is found
        {
            return true;
        }
        if((root->left && findpath(root->left,path,m)) || (root->right && findpath(root->right,path,m)))
        {
            return true;
        }
       path.pop_back();   // if didnt find pat through root ,pop the path back
        return false;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
         vector<int> path1,path2;
        TreeNode* temp;
        if(!findpath(root,path1,p) || !findpath(root,path2,q))  // if path is not present
        {
            return temp;
        }
        int i;
        for( i=0;i<path1.size()&& i<path2.size();i++)
        {
            if(path1[i]!=path2[i])    // find the first location where the value didnt match
            {
                break;
            }
        }
       temp=new TreeNode(path1[i-1]);
        return temp;
    }
};
